//--------------------------------------
//--- 010 Editor v6.0.2 Binary Template
//
// File: Person.bt
// Author: Lohengriny 
// Revision: 
// Purpose: For FEH Common/SRPG/Person
//--------------------------------------
const byte XORKEY[34] = {
  0x81, 0x00, 0x80, 0xA4, 0x5A, 0x16, 0x6F, 0x78,
  0x57, 0x81, 0x2D, 0xF7, 0xFC, 0x66, 0x0F, 0x27,
  0x75, 0x35, 0xB4, 0x34, 0x10, 0xEE, 0xA2, 0xDB,
  0xCC, 0xE3, 0x35, 0x99, 0x43, 0x48, 0xD2, 0xBB,
  0x93, 0xC1
};
#include "FEH_Common.bt.h"

LittleEndian();

typedef struct
{
    CryptStr duo_skill_id;;
    STATS bonus_effect;
    XORED8 kind(0x21); // 1 -> legendary/mythic, 2 -> duo
    XORED8 element(0x05);
    XORED8 bst(0x0F);
    XORED8 pair_up(0x80);
    FSkip(4);
}LegendaryInfo;

typedef struct
{
    local int i;
    local uint64 addr;
    for (i = 0; i < 70; i++)
    {
        addr = ReadUInt64();
        if (addr > 0) 
            CryptStr skill;
        else {
            FSkip(8);
        }
    }
} Skills;

typedef struct
{
    CryptStr id;
    CryptStr name_romance;
    CryptStr face;
    CryptStr face2;
    FSkip(16); // Not completed yet
    XORED64 timestamp(0xBDc1E742E9B6489B); // Not important, so not decoded;
    XORED32 id_num(0x5F6E4E18);
    XORED32 version_num(0x2E193A3C);
    XORED32 sort_value(0x2A80349B);
    XORED32 origins(0xE664B808)<format=binary>;
    byte weapon_type<read=WeaponTypeRead>;
    byte tome_class<read=TomeClassRead>;//Purpose unkown
    byte move<read=MoveRead>;
    XORED8 series(0x43);
    XORED8 regular(0xA1);
    XORED8 permanent(0xC7);
    XORED8 base_vector_id(0x3D);
    XORED8 is_refresher(0xFF);
    XORED8 dragonflowers(0xE4);
    FSkip(4);
    byte unkown;
    FSkip(2);
    STATS base_stats;
    STATS grow;
    Skills skills;
} Person<read = PersonRead>;

string PersonRead(Person &p)
{
    return ReadCryptedString(p.id);
}

string WeaponTypeRead(byte b)
{
    enum {Sword, Lance, Axr, RedBow, BlueBow, GreenBow, ColorlessBow, RedDagger, BlueDagger,
        GreedDagger, ColorlessDagger, RedTome, BlueTome, GreenTome, ColorlessTome, Staff, RedBreath, BlueBreath, GreenBreath,
        ColorlessBreath, RedBeast, BlueBeast, GreenBeast, ColorlessBeast} wps;
    wps = b^0x06;
    return EnumToString(wps);
}

string TomeClassRead(byte b)
{
    enum {None, Fire, Thunder, Wind, Light, Dark} element;
    element = b^0x35;
    return EnumToString(element);
}

string MoveRead(byte b)
{
    enum {Infantry, Armored, Cavalry, Flying} m;
    m = b^0x2A;
    return EnumToString(m);
}

uint archive_size;
uint ptr_list_offset;
uint ptr_list_length;
uint ptr_taglist_length;
uint unknown1;
uint unknown2;
uint64 magic;
uint64 data_list_ptr;
XORED64 data_size(0xDE51AB793C3AB9E1);
Person person[data_size.value ^ data_size.xorkey]<optimize=false>;
FSeek(ptr_list_offset + 0x20);
uint64 ptr_offset[ptr_list_length];
Tag taglist[ptr_taglist_length];
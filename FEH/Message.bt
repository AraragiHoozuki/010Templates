//--------------------------------------
//--- 010 Editor v6.0.2 Binary Template
//
// File: Message
// Author:
// Revision:
// Purpose:
//--------------------------------------
const byte ID_XORKEY[58] = {
  0x6F, 0xB0, 0x8F, 0xD6, 0xEF, 0x6A, 0x5A, 0xEB, 0xC6, 0x76, 0xF6, 0xE5, 
  0x56, 0x9D, 0xB8, 0x08, 0xE0, 0xBD, 0x93, 0xBA, 0x05, 0xCC, 0x26, 0x56, 
  0x65, 0x1E, 0xF8, 0x2B, 0xF9, 0xA1, 0x7E, 0x41, 0x18, 0x21, 0xA4, 0x94, 
  0x25, 0x08, 0xB8, 0x38, 0x2B, 0x98, 0x53, 0x76, 0xC6, 0x2E, 0x73, 0x5D, 
  0x74, 0xCB, 0x02, 0xE8, 0x98, 0xAB, 0xD0, 0x36, 0xE5, 0x37
};
const uint offset = 0x20;
LittleEndian();

typedef struct
{
    uint64 addr;
    local uint64 pos = FTell();
    if (addr !=0)
        FSeek(addr+offset);
        local int l = ReadStringLength(FTell());
        char content[l];
        FSeek(pos);
} cstring<read=ReadCryptedString>;

string ReadCryptedString(cstring &c)
{  
    if (c.addr == 0) return "Null";
    local int l1 = Strlen(c.content);
    local int l2 = 34;
    local char xored[l1];
    local int i = 0;
	for (i=0; i<l1; i++)
    {
        xored[i] = c.content[i]^ ID_XORKEY[i%58];
    }
    return xored;
}

FSeek(0x28);
cstring first;
while (FTell()<first.addr)
{
    cstring item;
}
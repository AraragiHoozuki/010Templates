//--------------------------------------
//--- 010 Editor v6.0.2 Binary Template
//
// File: Skill.bt
// Author:
// Revision:
// Purpose:
//--------------------------------------
const byte ID_XORKEY[34] = {
  0x81, 0x00, 0x80, 0xA4, 0x5A, 0x16, 0x6F, 0x78,
  0x57, 0x81, 0x2D, 0xF7, 0xFC, 0x66, 0x0F, 0x27,
  0x75, 0x35, 0xB4, 0x34, 0x10, 0xEE, 0xA2, 0xDB,
  0xCC, 0xE3, 0x35, 0x99, 0x43, 0x48, 0xD2, 0xBB,
  0x93, 0xC1
};
const uint offset = 0x20;
LittleEndian();

typedef struct
{
    uint64 addr;
    local uint64 pos = FTell();
    if (addr !=0)
        FSeek(addr+offset);
        local int l = ReadStringLength(FTell());
        char content[l];
        FSeek(pos);
} cstring<read=ReadCryptedString>;

typedef struct
{
    uint16 hp<read=HpRead>;
    uint16 atk<read=AtkRead>;
    uint16 spd<read=SpdRead>;
    uint16 def<read=DefRead>;
    uint16 res<read=ResRead>;
    FSkip(6);
} Stats; //for skill, stats not really mean stats.

string ReadCryptedString(cstring &c)
{  
    if (c.addr == 0) return "Null";
    local int l1 = Strlen(c.content);
    local int l2 = 34;
    local char xored[l1];
    local int i = 0;
	for (i=0; i<l1; i++)
    {
        if (c.content[i]!=ID_XORKEY[i%34])
            xored[i] = c.content[i]^ ID_XORKEY[i%34];
        else
        {
            xored[i] = c.content[i];
        }
    }
    return xored;
}

typedef struct
{
    uint64 addr;
    local uint64 pos = FTell();
    if (addr !=0)
        FSeek(addr+offset);
        local int l = ReadStringLength(FTell());
        char content[l];
        FSeek(pos);
} Sprite;

typedef struct {
    cstring id;
    cstring refine_base;
    cstring name;
    cstring desc;
    cstring refine_id;
    cstring requirements[2]<optimize=false>;
    cstring next_skill;
    Sprite sprites[4]<optimize=false>;
    if ( ReadUInt64() == 0 )
        Sprite sprite<hidden=true>;
    Stats stats;
    Stats dagger_debuff;
    Stats skill_params;
    Stats refine_stats;
    uint32 internal_id<read=InternalIdRead>;
    uint32 sort_id<hidden=true>;
    uint32 icon<read=IconRead>;
    uint32 wep_equip<hidden=true>;
    uint32 mov_equip<hidden=true>;
    uint32 sp_cost<read=SpCostRead>;
    byte category<read=CategoryRead>;
    byte tome_class<read=TomeClassRead>;
    byte exclusive<read=ExclusiveRead>;
    byte enemy_only<hidden=true>;
    byte range<read=RangeRead>;
    byte might<read=MightRead>;
    byte cooldown<read=RangeRead>;
    byte healing<hidden=true>;
    byte healing2<hidden=true>;
    byte skill_range<read=SkillRangeRead>;
    byte score<read=ScoreRead>;
    byte unknown1<hidden=true>;
    FSkip(4);
    uint32 tokkou_wep<hidden=true>;
    uint32 tokkou_mov<hidden=true>;
    uint32 unknown2<hidden=true>;
    uint32 mov_shield<hidden=true>;
    uint32 wep_weak<hidden=true>;
    uint32 unknown3<hidden=true>;
    uint32 wep_adaptive<hidden=true>;
    uint32 unknown4<hidden=true>;
    uint32 timing_id<read=TimingIdRead>;
    uint32 ability_id<read=AbilityIdRead>;
    uint32 limit_id1<read=LimitIdRead>;
    uint16 limit1_params[2]<read=LimitParamRead>;
    uint32 limit_id2<read=LimitIdRead>;
    uint16 limit2_params[2]<read=LimitParamRead>;
    uint32 target_weapon<read=TargetWeaponRead>;
    uint32 target_mov;
    cstring passive_next;
    uint64 timestamp;
    byte unknown5<hidden=true>;
    byte min_lv;
    byte max_lv;
    byte unknown6<hidden=true>;
    byte unknown7<hidden=true>;
    FSkip(3);
    cstring id2;
    cstring next_seal;
    cstring prev_seal;
    uint16 ss_coin;
    uint16 ss_badge_type;
    uint16 ss_badge;
    uint16 ss_great_badge;
} SkillData<read=ReadSkillName>;

string ReadSkillName(SkillData &s)
{
    return ReadCryptedString(s.id);
}

string HpRead(uint16 i)
{
    string s;
    SPrintf( s, "%d", (int16)(i^0xD632));
    return s;
}

string AtkRead(uint16 i)
{
    string s;
    SPrintf( s, "%d", (int16)(i^0x14A0));
    return s;
}

string SpdRead(uint16 i)
{
    string s;
    SPrintf( s, "%d", (int16)(i^0xA55E));
    return s;
}

string DefRead(uint16 i)
{
    string s;
    SPrintf( s, "%d", (int16)(i^0x8566));
    return s;
}

string ResRead(uint16 i)
{
    string s;
    SPrintf( s, "%d", (int16)(i^0xAEE5));
    return s;
}

string InternalIdRead(uint32 i)
{
    string s;
    SPrintf( s, "%d", (int)(i^0xC6A53A23));
    return s;
}

string IconRead(uint32 i)
{
    string s;
    SPrintf( s, "%d", (int)i^0xC6DF2173);
    return s;
}

string SpCostRead(uint32 i)
{
    string s;
    SPrintf( s, "%d", (int)i^0xC031F669);
    return s;
}

string CategoryRead(byte b)
{
    enum {Weapon, Assist, Special, A, B, C, S, Effect} cat;
    cat = b^0xBC;
    return EnumToString(cat);
}

string TomeClassRead(byte b)
{
    enum {None, Fire, Thunder, Wind, Light, Dark} element;
    element = b^0xF1;
    return EnumToString(element);
}

string ExclusiveRead(byte b)
{
    byte xored = b^0xCC;
    if (xored > 0) return "True";
    else { return "False"; }
}

string RangeRead(byte b)
{
    string s;
    SPrintf( s, "%d", (int)b^0x56);
    return s;
}

string MightRead(byte b)
{
    string s;
    SPrintf( s, "%d", (byte)(b^0xD2));
    return s;
}

string SkillRangeRead(byte b)
{
    string s;
    SPrintf( s, "%d", (int)(b^0x09));
    return s;
}

string ScoreRead(byte b)
{
    string s;
    SPrintf( s, "%d", (int)(b^0x32));
    return s;
}

string TimingIdRead(uint32 i)
{
    string s;
    SPrintf( s, "%d", (uint32)(i^0x9C776648));
    return s;
}

string AbilityIdRead(uint32 i)
{
    string s;
    SPrintf( s, "%d", (uint32)(i^0x72B07325));
    return s;
}

string TargetWeaponRead(uint32 i)
{
    return IntToBinaryStr(i^0x409FC9D7);
}

string LimitIdRead(uint32 i)
{
    string s;
    SPrintf( s, "%d", (uint32)(i^0x0EBDB832));
    return s;
}

string LimitParamRead(uint16 i)
{
    string s;
    SPrintf( s, "%d", (int16)(i^0xA590));
    return s;
}

FSeek(0x30);
SkillData first;
while (FTell() < first.id.addr)
{
    SkillData skill;
}

//--------------------------------------
//--- 010 Editor v6.0.2 Binary Template
//
// File: Skill.bt
// Author:
// Revision:
// Purpose:
//--------------------------------------
const byte XORKEY[34] = {
  0x81, 0x00, 0x80, 0xA4, 0x5A, 0x16, 0x6F, 0x78,
  0x57, 0x81, 0x2D, 0xF7, 0xFC, 0x66, 0x0F, 0x27,
  0x75, 0x35, 0xB4, 0x34, 0x10, 0xEE, 0xA2, 0xDB,
  0xCC, 0xE3, 0x35, 0x99, 0x43, 0x48, 0xD2, 0xBB,
  0x93, 0xC1
};
#include "FEH_Common.bt.h"
LittleEndian();

typedef struct
{
    uint64 addr;
    local uint64 pos = FTell();
    if (addr !=0)
        FSeek(addr+offset);
        local int l = ReadStringLength(FTell());
        char content[l];
        FSeek(pos);
} Sprite;

typedef struct {
    CryptStr id;
    CryptStr refine_base;
    CryptStr name;
    CryptStr desc;
    CryptStr refine_id;
    CryptStr beast_effect_id;
    CryptStr prerequisites[2]<optimize=false>;
    CryptStr next_skill;
    Sprite sprites[4]<optimize=false>;
    STATS stats;
    STATS class_params;
    STATS combat_buffs;
    STATS skill_params;
    STATS skill_params2;
    STATS refine_stats;
    XORED32 id_num(0xC6A53A23);
    XORED32 sort_id(0x8DDBF8AC);
    XORED32 icon_id(0xC6DF2173);
    XORED32 wep_equip(0x35B99828)<format=binary>;
    XORED32 mov_equip(0xAB2818EB)<format=binary>;
    XORED32 sp_cost(0xC031F669);
    XORED8 category(0xBC);
    byte tome_class<read=TomeClassRead>;
    XORED8 exclusive(0xCC);
    XORED8 enemy_only(0x4F);
    XORED8 range(0x56);
    XORED8 might(0xD2);
    XORED8 cooldown_count(0x56);
    XORED8 assist_cd(0xF2);
    XORED8 healing(0x95);
    XORED8 skill_range(0x09);
    XORED16 score(0xA232);
    XORED8 promotion_tier(0xE0);
    XORED8 promotion_rarity(0x75);
    XORED8 refined(0x02);
    XORED8 refine_sort_id(0xFC);
    XORED32 wep_effective(0x23BE3D43)<format=binary>;
    XORED32 mov_effective(0x823FDAEB)<format=binary>;
    XORED32 wep_shield(0xAABAB743)<format=binary>;
    XORED32 mov_shield(0x0EBEF25B)<format=binary>;
    XORED32 wep_weakness(0x005A02AF)<format=binary>;
    XORED32 mov_weakness(0xB269B819)<format=binary>;
    XORED32 wep_adaptive(0x494E2629)<format=binary>;
    XORED32 mov_adaptive(0xEE6CEF2E)<format=binary>;
    XORED32 timing_id(0x9C776648);
    XORED32 ability_id(0x72B07325);
    XORED32 limit1_id(0x0EBDB832);
    XORED16 limit1_params(0xA590)[2]<optimize=false>;
    XORED32 limit2_id(0x0EBDB832);
    XORED16 limit2_params(0xA590)[2]<optimize=false>;
    XORED32 target_wep(0x409FC9D7)<format=binary>;
    XORED32 target_mov(0x6C64D122)<format=binary>;
    CryptStr passive_next;
    XORED64 timestamp(0xED3F39F93BFE9F51);
    XORED8 random_allowed(0x10);
    XORED8 min_lv(0x90);
    XORED8 max_lv(0x24);
    XORED8 tt_inherit_base(0x19);
    XORED8 random_mode(0xBE);
    FSkip(3);
    XORED32 limit3_id(0x0EBDB832);
    XORED16 limit3_params(0xA590)[2]<optimize=false>;
    XORED8 range_shape(0x5C);
    XORED8 target_either(0xA7);
    XORED8 distant_counter(0xDB);
    XORED8 canto_range(0x41);
    XORED8 pathfinder(0xBE);
    FSkip(3);
} SkillData<read=ReadSkillName>;

string ReadSkillName(SkillData &s)
{
    return ReadCryptedString(s.id);
}

string TomeClassRead(byte b)
{
    enum {None, Fire, Thunder, Wind, Light, Dark} element;
    element = b^0xF1;
    return EnumToString(element);
}


uint archive_size;
uint ptr_list_offset;
uint ptr_list_length;
uint ptr_taglist_length;
uint unknown1;
uint unknown2;
uint64 magic;
uint64 data_list_ptr;
XORED64 data_size(0x7FECC7074ADEE9AD);
SkillData skill[data_size.value ^ data_size.xorkey]<optimize=false>;
FSeek(ptr_list_offset + 0x20);
uint64 ptr_offset[ptr_list_length];
Tag taglist[ptr_taglist_length];